// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                 String       @id @default(cuid())
  clerkId            String       @unique
  email              String       @unique
  first_name         String?
  last_name          String?
  avatar             String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  createdHubs        Hub[]        // Hubs the user created
  hubs               HubUser[]    // Hubs the user is a part of
  createdInviteLinks InviteLink[] // InviteLinks the user created
}

model Hub {
  id          String       @id @default(cuid())
  title       String
  description String?
  createdById String
  createdAt   DateTime     @default(now())

  inviteLinks InviteLink[] // invite links associated with this hubs
  users       HubUser[]    // users who joined this hub

  createdBy   User         @relation(fields: [createdById], references: [id])
}

model HubUser {
  userId      String
  hubId       String
  role        Role
  displayName String?   // eg. "HOD" instead of "Admin", "Student" instead of "Member"
  joinedAt    DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  hub         Hub       @relation(fields: [hubId], references: [id])

  @@id([userId, hubId]) //composite primary key
}

model InviteLink {
  id          String   @id @default(cuid())
  hubId       String
  token       String   @unique
  role        Role
  expiresAt   DateTime
  isActive    Boolean  @default(true) // if admin manually deactivates an invite link
  createdById String
  createdAt   DateTime @default(now())

  hub         Hub      @relation(fields: [hubId], references: [id])
  createdBy   User     @relation(fields: [createdById], references: [id])
}

enum Role {
  ADMIN
  MODERATOR
  MEMBER
}
